import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

# Simulated historical cryptocurrency price data (replace this with your actual data)
dates = pd.date_range('20230101', periods=100)
prices = np.random.rand(100) * 1000  # Replace this with your actual price data

# Create a pandas DataFrame
df = pd.DataFrame({'Date': dates, 'Price': prices})

# Feature engineering: creating lagged columns to use as predictors
for i in range(1, 6):  # Use lagged prices up to 5 days prior
    df[f'Price_Lag_{i}'] = df['Price'].shift(i)

# Remove rows with NaN values
df.dropna(inplace=True)

# Split data into training and testing sets
X = df.drop(['Date', 'Price'], axis=1)  # Features
y = df['Price']  # Target variable
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and fit a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict prices
predictions = model.predict(X_test)

# Plot actual vs predicted prices
plt.figure(figsize=(10, 6))
plt.scatter(y_test, predictions)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Cryptocurrency Prices')
plt.show()
